from pyee import EventEmitter
from pyppeteer.connection import Connection as Connection
from pyppeteer.errors import BrowserError as BrowserError
from pyppeteer.page import Page as Page
from pyppeteer.target import Target as Target
from subprocess import Popen
from typing import Any, Awaitable, Callable, Dict, List, Optional

logger: Any

class Browser(EventEmitter):
    Events: Any = ...
    def __init__(self, connection: Connection, contextIds: List[str], ignoreHTTPSErrors: bool, defaultViewport: Optional[Dict], process: Optional[Popen]=..., closeCallback: Callable[[], Awaitable[None]]=..., **kwargs: Any): ...
    @property
    def process(self) -> Optional[Popen]: ...
    async def createIncogniteBrowserContext(self) -> BrowserContext: ...
    async def createIncognitoBrowserContext(self) -> BrowserContext: ...
    @property
    def browserContexts(self) -> List[BrowserContext]: ...
    @staticmethod
    async def create(connection: Connection, contextIds: List[str], ignoreHTTPSErrors: bool, defaultViewport: Optional[Dict], process: Optional[Popen]=..., closeCallback: Callable[[], Awaitable[None]]=..., **kwargs: Any) -> Browser: ...
    @property
    def wsEndpoint(self) -> str: ...
    async def newPage(self) -> Page: ...
    def targets(self) -> List[Target]: ...
    async def pages(self) -> List[Page]: ...
    async def version(self) -> str: ...
    async def userAgent(self) -> str: ...
    async def close(self) -> None: ...
    async def disconnect(self) -> None: ...

class BrowserContext(EventEmitter):
    Events: Any = ...
    def __init__(self, browser: Browser, contextId: Optional[str]) -> None: ...
    def targets(self) -> List[Target]: ...
    async def pages(self) -> List[Page]: ...
    def isIncognite(self) -> bool: ...
    def isIncognito(self) -> bool: ...
    async def newPage(self) -> Page: ...
    @property
    def browser(self) -> Browser: ...
    async def close(self) -> None: ...
