import asyncio
from pyee import EventEmitter
from pyppeteer.errors import NetworkError as NetworkError
from typing import Any, Awaitable, Callable, Dict, Union

logger: Any
logger_connection: Any
logger_session: Any

class Connection(EventEmitter):
    connection: Any
    def __init__(self, url: str, loop: asyncio.AbstractEventLoop, delay: int=...) -> None: ...
    @property
    def url(self) -> str: ...
    def send(self, method: str, params: dict=...) -> Awaitable: ...
    def setClosedCallback(self, callback: Callable[[], None]) -> None: ...
    async def dispose(self) -> None: ...
    async def createSession(self, targetInfo: Dict) -> CDPSession: ...

class CDPSession(EventEmitter):
    def __init__(self, connection: Union[Connection, CDPSession], targetType: str, sessionId: str, loop: asyncio.AbstractEventLoop) -> None: ...
    def send(self, method: str, params: dict=...) -> Awaitable: ...
    async def detach(self) -> None: ...
