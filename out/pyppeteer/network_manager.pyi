from pyee import EventEmitter
from pyppeteer.connection import CDPSession as CDPSession
from pyppeteer.errors import NetworkError as NetworkError
from pyppeteer.frame_manager import Frame as Frame, FrameManager as FrameManager
from pyppeteer.helper import debugError as debugError
from pyppeteer.multimap import Multimap as Multimap
from typing import Any, Awaitable, Dict, List, Optional, Union

logger: Any

class NetworkManager(EventEmitter):
    Events: Any = ...
    def __init__(self, client: CDPSession, frameManager: FrameManager): ...
    async def authenticate(self, credentials: Dict[str, str]) -> None: ...
    async def setExtraHTTPHeaders(self, extraHTTPHeaders: Dict[str, str]) -> None: ...
    def extraHTTPHeaders(self) -> Dict[str, str]: ...
    async def setOfflineMode(self, value: bool) -> None: ...
    async def setUserAgent(self, userAgent: str) -> None: ...
    async def setRequestInterception(self, value: bool) -> None: ...

class Request:
    def __init__(self, client: CDPSession, requestId: Optional[str], interceptionId: Optional[str], isNavigationRequest: bool, allowInterception: bool, url: str, resourceType: str, payload: dict, frame: Optional[Frame], redirectChain: List[Request]) -> None: ...
    @property
    def url(self) -> str: ...
    @property
    def resourceType(self) -> str: ...
    @property
    def method(self) -> Optional[str]: ...
    @property
    def postData(self) -> Optional[str]: ...
    @property
    def headers(self) -> Dict: ...
    @property
    def response(self) -> Optional[Response]: ...
    @property
    def frame(self) -> Optional[Frame]: ...
    def isNavigationRequest(self) -> bool: ...
    @property
    def redirectChain(self) -> List[Request]: ...
    def failure(self) -> Optional[Dict]: ...
    async def continue_(self, overrides: Dict=...) -> None: ...
    async def respond(self, response: Dict) -> None: ...
    async def abort(self, errorCode: str=...) -> None: ...

errorReasons: Any

class Response:
    def __init__(self, client: CDPSession, request: Request, status: int, headers: Dict[str, str], fromDiskCache: bool, fromServiceWorker: bool, securityDetails: Dict=...) -> None: ...
    @property
    def url(self) -> str: ...
    @property
    def ok(self) -> bool: ...
    @property
    def status(self) -> int: ...
    @property
    def headers(self) -> Dict: ...
    @property
    def securityDetails(self) -> Union[Dict, SecurityDetails]: ...
    def buffer(self) -> Awaitable[bytes]: ...
    async def text(self) -> str: ...
    async def json(self) -> dict: ...
    @property
    def request(self) -> Request: ...
    @property
    def fromCache(self) -> bool: ...
    @property
    def fromServiceWorker(self) -> bool: ...

def generateRequestHash(request: dict) -> str: ...

class SecurityDetails:
    def __init__(self, subjectName: str, issuer: str, validFrom: int, validTo: int, protocol: str) -> None: ...
    @property
    def subjectName(self) -> str: ...
    @property
    def issuer(self) -> str: ...
    @property
    def validFrom(self) -> int: ...
    @property
    def validTo(self) -> int: ...
    @property
    def protocol(self) -> str: ...

statusTexts: Any
