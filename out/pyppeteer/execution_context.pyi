from pyppeteer import helper as helper
from pyppeteer.connection import CDPSession as CDPSession
from pyppeteer.element_handle import ElementHandle as ElementHandle
from pyppeteer.errors import ElementHandleError as ElementHandleError, NetworkError as NetworkError
from pyppeteer.frame_manager import Frame as Frame
from pyppeteer.helper import debugError as debugError
from typing import Any, Dict, Optional

logger: Any
EVALUATION_SCRIPT_URL: str
SOURCE_URL_REGEX: Any

class ExecutionContext:
    def __init__(self, client: CDPSession, contextPayload: Dict, objectHandleFactory: Any, frame: Frame=...) -> None: ...
    @property
    def frame(self) -> Optional[Frame]: ...
    async def evaluate(self, pageFunction: str, *args: Any, force_expr: bool=...) -> Any: ...
    async def evaluateHandle(self, pageFunction: str, *args: Any, force_expr: bool=...) -> JSHandle: ...
    async def queryObjects(self, prototypeHandle: JSHandle) -> JSHandle: ...

class JSHandle:
    def __init__(self, context: ExecutionContext, client: CDPSession, remoteObject: Dict) -> None: ...
    @property
    def executionContext(self) -> ExecutionContext: ...
    async def getProperty(self, propertyName: str) -> JSHandle: ...
    async def getProperties(self) -> Dict[str, JSHandle]: ...
    async def jsonValue(self) -> Dict: ...
    def asElement(self) -> Optional[ElementHandle]: ...
    async def dispose(self) -> None: ...
    def toString(self) -> str: ...
