from tweepy.utils import parse_a_href as parse_a_href, parse_datetime as parse_datetime, parse_html_value as parse_html_value
from typing import Any, Optional

class ResultSet(list):
    def __init__(self, max_id: Optional[Any] = ..., since_id: Optional[Any] = ...) -> None: ...
    @property
    def max_id(self): ...
    @property
    def since_id(self): ...
    def ids(self): ...

class Model:
    def __init__(self, api: Optional[Any] = ...) -> None: ...
    @classmethod
    def parse(cls, api: Any, json: Any) -> None: ...
    @classmethod
    def parse_list(cls, api: Any, json_list: Any): ...

class Status(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    def destroy(self): ...
    def retweet(self): ...
    def retweets(self): ...
    def favorite(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class User(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    @classmethod
    def parse_list(cls, api: Any, json_list: Any): ...
    def timeline(self, **kwargs: Any): ...
    def friends(self, **kwargs: Any): ...
    def followers(self, **kwargs: Any): ...
    following: bool = ...
    def follow(self) -> None: ...
    def unfollow(self) -> None: ...
    def lists_memberships(self, *args: Any, **kwargs: Any): ...
    def lists_subscriptions(self, *args: Any, **kwargs: Any): ...
    def lists(self, *args: Any, **kwargs: Any): ...
    def followers_ids(self, *args: Any, **kwargs: Any): ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class DirectMessage(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    @classmethod
    def parse_list(cls, api: Any, json_list: Any): ...
    def destroy(self): ...

class Friendship(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class SavedSearch(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    def destroy(self): ...

class SearchResults(ResultSet):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class List(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    @classmethod
    def parse_list(cls, api: Any, json_list: Any, result_set: Optional[Any] = ...): ...
    def update(self, **kwargs: Any): ...
    def destroy(self): ...
    def timeline(self, **kwargs: Any): ...
    def add_member(self, id: Any): ...
    def remove_member(self, id: Any): ...
    def members(self, **kwargs: Any): ...
    def is_member(self, id: Any): ...
    def subscribe(self): ...
    def unsubscribe(self): ...
    def subscribers(self, **kwargs: Any): ...
    def is_subscribed(self, id: Any): ...

class Relation(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class Relationship(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class JSONModel(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class IDModel(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class BoundingBox(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    def origin(self): ...
    def corner(self): ...

class Place(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...
    @classmethod
    def parse_list(cls, api: Any, json_list: Any): ...

class Media(Model):
    @classmethod
    def parse(cls, api: Any, json: Any): ...

class ModelFactory:
    status: Any = ...
    user: Any = ...
    direct_message: Any = ...
    friendship: Any = ...
    saved_search: Any = ...
    search_results: Any = ...
    list: Any = ...
    relation: Any = ...
    relationship: Any = ...
    media: Any = ...
    json: Any = ...
    ids: Any = ...
    place: Any = ...
    bounding_box: Any = ...
