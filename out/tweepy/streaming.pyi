from tweepy.api import API as API
from tweepy.error import TweepError as TweepError
from tweepy.models import Status as Status
from typing import Any, Optional

STREAM_VERSION: str
log: Any

class StreamListener:
    api: Any = ...
    def __init__(self, api: Optional[Any] = ...) -> None: ...
    def on_connect(self) -> None: ...
    def on_data(self, raw_data: Any): ...
    def keep_alive(self) -> None: ...
    def on_status(self, status: Any) -> None: ...
    def on_exception(self, exception: Any) -> None: ...
    def on_delete(self, status_id: Any, user_id: Any) -> None: ...
    def on_event(self, status: Any) -> None: ...
    def on_direct_message(self, status: Any) -> None: ...
    def on_friends(self, friends: Any) -> None: ...
    def on_limit(self, track: Any) -> None: ...
    def on_error(self, status_code: Any): ...
    def on_timeout(self) -> None: ...
    def on_disconnect(self, notice: Any) -> None: ...
    def on_warning(self, notice: Any) -> None: ...
    def on_scrub_geo(self, notice: Any) -> None: ...
    def on_status_withheld(self, notice: Any) -> None: ...
    def on_user_withheld(self, notice: Any) -> None: ...

class ReadBuffer:
    def __init__(self, stream: Any, chunk_size: Any, encoding: str = ...) -> None: ...
    def read_len(self, length: Any): ...
    def read_line(self, sep: Any = ...): ...

class Stream:
    auth: Any = ...
    listener: Any = ...
    running: bool = ...
    daemon: Any = ...
    timeout: Any = ...
    retry_count: Any = ...
    retry_time_start: Any = ...
    retry_420_start: Any = ...
    retry_time_cap: Any = ...
    snooze_time_step: Any = ...
    snooze_time_cap: Any = ...
    chunk_size: Any = ...
    verify: Any = ...
    api: Any = ...
    headers: Any = ...
    body: Any = ...
    retry_time: Any = ...
    snooze_time: Any = ...
    proxies: Any = ...
    host: Any = ...
    def __init__(self, auth: Any, listener: Any, **options: Any) -> None: ...
    session: Any = ...
    def new_session(self) -> None: ...
    def on_closed(self, resp: Any) -> None: ...
    url: Any = ...
    def userstream(self, stall_warnings: bool = ..., _with: Optional[Any] = ..., replies: Optional[Any] = ..., track: Optional[Any] = ..., locations: Optional[Any] = ..., is_async: bool = ..., encoding: str = ...) -> None: ...
    def firehose(self, count: Optional[Any] = ..., is_async: bool = ...) -> None: ...
    def retweet(self, is_async: bool = ...) -> None: ...
    def sample(self, is_async: bool = ..., languages: Optional[Any] = ..., stall_warnings: bool = ...) -> None: ...
    def filter(self, follow: Optional[Any] = ..., track: Optional[Any] = ..., is_async: bool = ..., locations: Optional[Any] = ..., stall_warnings: bool = ..., languages: Optional[Any] = ..., encoding: str = ..., filter_level: Optional[Any] = ...) -> None: ...
    def sitestream(self, follow: Any, stall_warnings: bool = ..., with_: str = ..., replies: bool = ..., is_async: bool = ...) -> None: ...
    def disconnect(self) -> None: ...
