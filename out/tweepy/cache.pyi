from typing import Any, Optional

log: Any

class Cache:
    timeout: Any = ...
    def __init__(self, timeout: int = ...) -> None: ...
    def store(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any, timeout: Optional[Any] = ...) -> None: ...
    def count(self) -> None: ...
    def cleanup(self) -> None: ...
    def flush(self) -> None: ...

class MemoryCache(Cache):
    lock: Any = ...
    def __init__(self, timeout: int = ...) -> None: ...
    def store(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any, timeout: Optional[Any] = ...): ...
    def count(self): ...
    def cleanup(self) -> None: ...
    def flush(self) -> None: ...

class FileCache(Cache):
    cache_locks: Any = ...
    cache_dir: Any = ...
    lock: Any = ...
    def __init__(self, cache_dir: Any, timeout: int = ...) -> None: ...
    def store(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any, timeout: Optional[Any] = ...): ...
    def count(self): ...
    def cleanup(self) -> None: ...
    def flush(self) -> None: ...

class MemCacheCache(Cache):
    client: Any = ...
    timeout: Any = ...
    def __init__(self, client: Any, timeout: int = ...) -> None: ...
    def store(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any, timeout: Optional[Any] = ...): ...
    def count(self) -> None: ...
    def cleanup(self) -> None: ...
    def flush(self) -> None: ...

class RedisCache(Cache):
    client: Any = ...
    keys_container: Any = ...
    pre_identifier: Any = ...
    def __init__(self, client: Any, timeout: int = ..., keys_container: str = ..., pre_identifier: str = ...) -> None: ...
    def store(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any, timeout: Optional[Any] = ...): ...
    def count(self): ...
    def delete_entry(self, key: Any) -> None: ...
    def cleanup(self) -> None: ...
    def flush(self) -> None: ...

class MongodbCache(Cache):
    timeout: Any = ...
    col: Any = ...
    def __init__(self, db: Any, timeout: int = ..., collection: str = ...) -> None: ...
    def store(self, key: Any, value: Any) -> None: ...
    def get(self, key: Any, timeout: Optional[Any] = ...): ...
    def count(self): ...
    def delete_entry(self, key: Any): ...
    def cleanup(self) -> None: ...
    def flush(self) -> None: ...
