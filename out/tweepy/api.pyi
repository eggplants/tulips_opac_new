from tweepy.binder import bind_api as bind_api
from tweepy.error import TweepError as TweepError
from tweepy.parsers import ModelParser as ModelParser, Parser as Parser
from tweepy.utils import list_to_csv as list_to_csv
from typing import Any, Optional

class API:
    auth: Any = ...
    host: Any = ...
    search_host: Any = ...
    upload_host: Any = ...
    api_root: Any = ...
    search_root: Any = ...
    upload_root: Any = ...
    cache: Any = ...
    compression: Any = ...
    retry_count: Any = ...
    retry_delay: Any = ...
    retry_errors: Any = ...
    timeout: Any = ...
    wait_on_rate_limit: Any = ...
    wait_on_rate_limit_notify: Any = ...
    parser: Any = ...
    proxy: Any = ...
    def __init__(self, auth_handler: Optional[Any] = ..., host: str = ..., search_host: str = ..., upload_host: str = ..., cache: Optional[Any] = ..., api_root: str = ..., search_root: str = ..., upload_root: str = ..., retry_count: int = ..., retry_delay: int = ..., retry_errors: Optional[Any] = ..., timeout: int = ..., parser: Optional[Any] = ..., compression: bool = ..., wait_on_rate_limit: bool = ..., wait_on_rate_limit_notify: bool = ..., proxy: str = ...) -> None: ...
    @property
    def home_timeline(self): ...
    def statuses_lookup(self, id_: Any, *args: Any, **kwargs: Any): ...
    @property
    def user_timeline(self): ...
    @property
    def mentions_timeline(self): ...
    @property
    def related_results(self): ...
    @property
    def retweets_of_me(self): ...
    @property
    def get_status(self): ...
    def update_status(self, *args: Any, **kwargs: Any): ...
    def media_upload(self, filename: Any, *args: Any, **kwargs: Any): ...
    def create_media_metadata(self, media_id: Any, alt_text: Any, *args: Any, **kwargs: Any): ...
    def update_with_media(self, filename: Any, *args: Any, **kwargs: Any): ...
    @property
    def destroy_status(self): ...
    @property
    def retweet(self): ...
    @property
    def unretweet(self): ...
    @property
    def retweets(self): ...
    @property
    def retweeters(self): ...
    @property
    def get_user(self): ...
    @property
    def get_oembed(self): ...
    def lookup_users(self, user_ids: Optional[Any] = ..., screen_names: Optional[Any] = ..., *args: Any, **kwargs: Any): ...
    def me(self): ...
    @property
    def search_users(self): ...
    @property
    def get_direct_message(self): ...
    @property
    def list_direct_messages(self): ...
    def send_direct_message(self, recipient_id: Any, text: Any, quick_reply_type: Optional[Any] = ..., attachment_type: Optional[Any] = ..., attachment_media_id: Optional[Any] = ...): ...
    @property
    def destroy_direct_message(self): ...
    @property
    def create_friendship(self): ...
    @property
    def destroy_friendship(self): ...
    @property
    def show_friendship(self): ...
    def lookup_friendships(self, user_ids: Optional[Any] = ..., screen_names: Optional[Any] = ...): ...
    @property
    def friends_ids(self): ...
    @property
    def friends(self): ...
    @property
    def friendships_incoming(self): ...
    @property
    def friendships_outgoing(self): ...
    @property
    def followers_ids(self): ...
    @property
    def followers(self): ...
    @property
    def get_settings(self): ...
    @property
    def set_settings(self): ...
    def verify_credentials(self, **kwargs: Any): ...
    @property
    def rate_limit_status(self): ...
    def update_profile_image(self, filename: Any, file_: Optional[Any] = ...): ...
    def update_profile_background_image(self, filename: Any, **kwargs: Any): ...
    def update_profile_banner(self, filename: Any, **kwargs: Any): ...
    @property
    def update_profile(self): ...
    @property
    def favorites(self): ...
    @property
    def create_favorite(self): ...
    @property
    def destroy_favorite(self): ...
    @property
    def create_block(self): ...
    @property
    def destroy_block(self): ...
    @property
    def mutes_ids(self): ...
    @property
    def mutes(self): ...
    @property
    def create_mute(self): ...
    @property
    def destroy_mute(self): ...
    @property
    def blocks(self): ...
    @property
    def blocks_ids(self): ...
    @property
    def report_spam(self): ...
    @property
    def saved_searches(self): ...
    @property
    def get_saved_search(self): ...
    @property
    def create_saved_search(self): ...
    @property
    def destroy_saved_search(self): ...
    @property
    def create_list(self): ...
    @property
    def destroy_list(self): ...
    @property
    def update_list(self): ...
    @property
    def lists_all(self): ...
    @property
    def lists_memberships(self): ...
    @property
    def lists_subscriptions(self): ...
    @property
    def list_timeline(self): ...
    @property
    def get_list(self): ...
    @property
    def add_list_member(self): ...
    @property
    def remove_list_member(self): ...
    def add_list_members(self, screen_name: Optional[Any] = ..., user_id: Optional[Any] = ..., slug: Optional[Any] = ..., list_id: Optional[Any] = ..., owner_id: Optional[Any] = ..., owner_screen_name: Optional[Any] = ...): ...
    def remove_list_members(self, screen_name: Optional[Any] = ..., user_id: Optional[Any] = ..., slug: Optional[Any] = ..., list_id: Optional[Any] = ..., owner_id: Optional[Any] = ..., owner_screen_name: Optional[Any] = ...): ...
    @property
    def list_members(self): ...
    @property
    def show_list_member(self): ...
    @property
    def subscribe_list(self): ...
    @property
    def unsubscribe_list(self): ...
    @property
    def list_subscribers(self): ...
    @property
    def show_list_subscriber(self): ...
    @property
    def trends_available(self): ...
    @property
    def trends_place(self): ...
    @property
    def trends_closest(self): ...
    @property
    def search(self): ...
    @property
    def reverse_geocode(self): ...
    @property
    def geo_id(self): ...
    @property
    def geo_search(self): ...
    @property
    def geo_similar_places(self): ...
    @property
    def supported_languages(self): ...
    @property
    def configuration(self): ...
